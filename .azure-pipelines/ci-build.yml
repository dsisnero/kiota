name: $(Date:yyyyMMdd)$(Rev:.r)
 
trigger:
  branches:
    include:
    - main
    - azure-pipelines
 
pr: none
 
variables:
  buildConfiguration: 'Release'
  BUILDPLATFORM: 'linux/amd64'
  REGISTRY: msgraphprodregistry.azurecr.io # Azure Container Registry
  IMAGE_NAME: public/openapi/kiota       # Docker image name
  PREVIEW_BRANCH: "refs/heads/main"      # Branch for preview builds
  VERSION_SUFFIX: ""                    # Version suffix for preview builds

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
  - repository: ReleasePipelines
    type: git
    name: "Graph Developer Experiences/release-pipelines"

parameters:
- name: poolName
  type: string
  default: Azure-Pipelines-1ESPT-ExDShared

- name: image
  type: string
  default: ubuntu-latest

- name: os
  type: string
  default: linux

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: ${{ parameters.poolName }}
      image: ${{ parameters.image }}
      os: ${{ parameters.os }}
    sdl:
      sourceAnalysisPool:
        name: Azure-Pipelines-1ESPT-ExDShared  # Name of your hosted pool
        image: windows-latest  # Name of the image in your pool. If not specified, first image of the pool is used
      sourceRepositoriesToScan:
        exclude:
        - repository: ReleasePipelines
    stages:
    - stage: Build
      jobs:
        - job: build
          steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 8'
            inputs:
              version: 8.x
          - task: UseDotNet@2
            displayName: 'Use .NET 9'
            inputs:
              version: 9.x
          # Install the nuget tool.
          - task: NuGetToolInstaller@1
            displayName: 'Install Nuget dependency manager'
            inputs:
              versionSpec: '>=5.2.0'
              checkLatest: true

          - script: |
              ls
            displayName: 'List files in the repo'
          # Build the Product project
          - task: DotNetCoreCLI@2
            displayName: "build"
            inputs:
              projects: '$(Build.SourcesDirectory)/kiota.sln'
              arguments: "--configuration $(BuildConfiguration) --no-incremental"
          - script: |
                docker version
                docker info
            displayName: Show docker environment
          - script: echo "##vso[task.setvariable variable=BUILDNUMBER]$(Build.BuildId)"
            displayName: 'Set BUILDNUMBER variable'
          - powershell: |
              .\scripts\get-prerelease-version.ps1 -currentBranch $(Build.SourceBranchName) -previewBranch 'azure-pipelines' -excludeHeadingDash
            displayName: 'Generate version suffix'

          - script: |
              echo "Generated version_suffix: $(versionSuffix)"
            displayName: 'Show generated version_suffix'

          # Publish the Product project with version_suffix if available
          - task: DotNetCoreCLI@2
            displayName: "publish with version_suffix"
            inputs:
              command: publish
              publishWebProjects: false
              projects: '$(Build.SourcesDirectory)/src/kiota/kiota.csproj'
              arguments: "-c Release -p:TreatWarningsAsErrors=false -f net9.0 --version-suffix $(versionSuffix)"
            condition: and(succeeded(), ne(variables['versionSuffix'], ''))

          # Publish the Product project without version_suffix if not available
          - task: DotNetCoreCLI@2
            displayName: "publish without version_suffix"
            inputs:
              command: publish
              publishWebProjects: false
              projects: '$(Build.SourcesDirectory)/src/kiota/kiota.csproj'
              arguments: "-c Release -p:TreatWarningsAsErrors=false -f net9.0"
            condition: and(succeeded(), eq(variables['versionSuffix'], ''))

          # Build Docker image for validation (no push)
          - task: 1ES.BuildContainerImage@1
            inputs:
              image: $(REGISTRY)/$(IMAGE_NAME):validation    # Image name to build (including a tag). Required. Alias: localImage
              path: $(Build.SourcesDirectory)                 # Required. Alias: context
              dockerfile: ./Dockerfile             # Optional. Default: 'contextPath/Dockerfile'
              buildArguments: --build-arg version_suffix=$(versionSuffix) --platform linux/amd64,linux/arm64/v8  
                     # Optional. Default: ''
          - task: Bash@3
            displayName: Save Docker Image
            inputs:
              targetType: inline
              script: |
                set -e
                IMAGE_NAME=$(REGISTRY)/$(IMAGE_NAME):validation
                
                # Create manifest.json
                echo '[{"Config":"config.json","RepoTags":["$(REGISTRY)/$(IMAGE_NAME):$(Build.BuildNumber)"],"Layers":["layer.tar"]}]' > $(Build.ArtifactStagingDirectory)/manifest.json
                
                # Export the image configuration
                docker inspect $(REGISTRY)/$(IMAGE_NAME):$(Build.BuildNumber) > $(Build.ArtifactStagingDirectory)/config.json
                
                # Save the image layers
                docker save $(REGISTRY)/$(IMAGE_NAME):$(Build.BuildNumber) -o $(Build.ArtifactStagingDirectory)/layer.tar
                
                # Create the final archive
                cd $(Build.ArtifactStagingDirectory)
                tar -czf kiota.tar.gz manifest.json config.json layer.tar
          
          - task: 1ES.PublishPipelineArtifact@1
            inputs:
              path: $(Build.ArtifactStagingDirectory)
              artifact: drop

    - stage: CheckoutAndCopy  # Add a new stage
      jobs:
        - template: pipelines/templates/checkout-and-copy-1es.yml@ReleasePipelines
          parameters:
            directory: 'kiota'
            repoName: ReleasePipelines